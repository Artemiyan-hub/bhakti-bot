import os
import telebot
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)

def main_reply_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton("üìò –ë—Ö–∞–∫—Ç–∏-–π–æ–≥–∞ –¥–ª—è —á–∞–π–Ω–∏–∫–æ–≤"),
        KeyboardButton("üìö –ö–Ω–∏–∂–Ω–∞—è –ø–æ–ª–∫–∞"),
        KeyboardButton("üéß –õ–µ–∫—Ü–∏–∏"),
        KeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏"),
        KeyboardButton("üóì –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        KeyboardButton("üí° –ü—Ä–æ—á–µ–µ"),
        KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    return markup

def books_menu_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    books = [
        "–°–ª–æ–≤–æ –•—Ä–∞–Ω–∏—Ç–µ–ª—è –ü—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç–∏",
        "–ë—Ö–∞–≥–∞–≤–∞–¥ –ì–∏—Ç–∞",
        "–®—Ä–∏–º–∞–¥ –ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º",
        "–ß–∞–π—Ç–∞–Ω—å—è –ß–∞—Ä–∏—Ç–∞–º—Ä–∏—Ç–∞",
        "–ë—Ä–∏—Ö–∞–¥ –ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º—Ä–∏—Ç–∞",
        "–≠–≤–æ–ª—é—Ü–∏—è —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–≥–æ"
    ]
    for book in books:
        markup.add(KeyboardButton(book))
    markup.add(KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ë—Ö–∞–∫—Ç–∏-–π–æ–≥–∏ üôè\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=main_reply_keyboard()
    )

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    text = message.text

    if text == "üìò –ë—Ö–∞–∫—Ç–∏-–π–æ–≥–∞ –¥–ª—è —á–∞–π–Ω–∏–∫–æ–≤":
        bot.send_message(message.chat.id, "üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë—Ö–∞–∫—Ç–∏-–π–æ–≥–µ –¥–ª—è —á–∞–π–Ω–∏–∫–æ–≤", reply_markup=main_reply_keyboard())

    elif text == "üìö –ö–Ω–∏–∂–Ω–∞—è –ø–æ–ª–∫–∞":
        bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=books_menu_keyboard())

    elif text in [
        "–°–ª–æ–≤–æ –•—Ä–∞–Ω–∏—Ç–µ–ª—è –ü—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç–∏", "–ë—Ö–∞–≥–∞–≤–∞–¥ –ì–∏—Ç–∞", "–®—Ä–∏–º–∞–¥ –ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º",
        "–ß–∞–π—Ç–∞–Ω—å—è –ß–∞—Ä–∏—Ç–∞–º—Ä–∏—Ç–∞", "–ë—Ä–∏—Ö–∞–¥ –ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º—Ä–∏—Ç–∞", "–≠–≤–æ–ª—é—Ü–∏—è —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–≥–æ"
    ]:
        file_path = f"books/{text}.pdf"
        if os.path.exists(file_path):
            with open(file_path, 'rb') as doc:
                bot.send_document(message.chat.id, doc, caption=f"üìñ {text}")
        else:
            bot.send_message(message.chat.id, f"–§–∞–π–ª –∫–Ω–∏–≥–∏ '{text}' –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=books_menu_keyboard())

    elif text == "üéß –õ–µ–∫—Ü–∏–∏":
        bot.send_message(message.chat.id, "üéß –õ–µ–∫—Ü–∏–∏: (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=main_reply_keyboard())

    elif text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏":
        bot.send_message(message.chat.id, "üì¶ –ó–∞–∫–∞–∑ –∫–Ω–∏–≥: –Ω–∞–ø–∏—à–∏—Ç–µ @your_contact", reply_markup=main_reply_keyboard())

    elif text == "üóì –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        bot.send_message(message.chat.id, "üóì –°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è!", reply_markup=main_reply_keyboard())

    elif text == "üí° –ü—Ä–æ—á–µ–µ":
        bot.send_message(message.chat.id, "üí° –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_reply_keyboard())

    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_reply_keyboard())

    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=main_reply_keyboard())

@server.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "OK", 200

@server.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"

if __name__ == "__main__":
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}")
    server.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
